name: Build Cross-Platform Binaries

permissions:
  id-token: write
  contents: read

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual testing

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x64
            platform: linux
          - os: macos-latest
            arch: x64
            platform: darwin
          - os: macos-14
            arch: arm64
            platform: darwin
          - os: windows-latest
            arch: x64
            platform: windows

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for setuptools_scm
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Verify Python environment
      run: |
        python --version
        pip list
    
    - name: Test imports before build
      run: |
        python -c "from aznuke.cli import cmd_scan, cmd_delete; print('CLI imports successful')"
        python cli_entry.py --version
    
    - name: Build binary
      run: |
        pyinstaller aznuke.spec --clean --distpath dist --workpath build
      env:
        PYTHONPATH: ${{ github.workspace }}
    
    - name: List build output (Unix)
      if: matrix.platform != 'windows'
      run: |
        ls -la dist/
        
    - name: List build output (Windows)
      if: matrix.platform == 'windows'
      run: |
        dir dist\
        
    - name: Test binary (Unix)
      if: matrix.platform != 'windows'
      run: |
        chmod +x dist/aznuke
        ./dist/aznuke --version
        ./dist/aznuke scan --help
    
    - name: Test binary (Windows)
      if: matrix.platform == 'windows'
      run: |
        .\dist\aznuke.exe --version
        .\dist\aznuke.exe scan --help
    
    - name: Rename binary (Windows)
      if: matrix.platform == 'windows'
      run: |
        move dist\aznuke.exe dist\aznuke-${{ matrix.platform }}-${{ matrix.arch }}.exe
    
    - name: Rename binary (Unix)
      if: matrix.platform != 'windows'
      run: |
        mv dist/aznuke dist/aznuke-${{ matrix.platform }}-${{ matrix.arch }}
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: aznuke-${{ matrix.platform }}-${{ matrix.arch }}
        path: dist/aznuke-${{ matrix.platform }}-${{ matrix.arch }}*
        retention-days: 30
    
    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          build/
          *.log
        retention-days: 7

  # Only run PyPI and release jobs for actual releases (tags)
  pypi:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for setuptools_scm
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools-scm
    
    - name: Debug version detection
      run: |
        git tag -l
        git describe --tags
        python -c "import setuptools_scm; print('setuptools_scm version:', setuptools_scm.get_version())"
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: python -m twine check dist/*
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    
    - name: List artifacts
      run: find . -name "aznuke-*" -type f -ls
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          aznuke-*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }} 